import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Read the CSV file generated by the previous script
csv_file = 'aggregated_dpd_results.csv'
data = pd.read_csv(csv_file)

# Define the categories to be plotted
categories = ["Asymmetric", "Covert", "Deceptive", "Hides Information", "Restrictive"]

# Prepare and plot the data for each category
for category in categories:
    # Extract columns related to the current category
    category_columns = [col for col in data.columns if category in col]
    
    # Create a DataFrame for the current category
    category_data = data[["website"] + category_columns]
    
    # Melt the DataFrame to long format
    category_melted = category_data.melt(id_vars=["website"], var_name="run", value_name="score")
    
    # Convert "failed" entries to NaN for proper plotting
    category_melted["score"] = pd.to_numeric(category_melted["score"], errors='coerce')
    
    # Calculate the average score for sorting websites
    avg_scores = category_melted.groupby('website')['score'].mean()
    sorted_websites = avg_scores.sort_values(ascending=False).index
    
    # Sort the DataFrame by website based on the sorted list
    category_melted["website"] = pd.Categorical(category_melted["website"], categories=sorted_websites, ordered=True)
    
    # Plot the boxplot
    plt.figure(figsize=(18, 12))  # Adjust figure size for better resolution and space
    sns.set(style="whitegrid")  # Set the background style for better readability
    ax = sns.boxplot(x='website', y='score', data=category_melted, palette="coolwarm", fliersize=6)
    
    # Customize the plot
    plt.title(f"Boxplot of Scores for {category} Across Different Runs", fontsize=16, fontweight='bold')
    plt.xticks([])  # Remove x-axis labels
    plt.xlabel("Websites Sorted from Dark to Light", fontsize=14)  # Add x-axis label
    plt.ylabel(f"{category} Scores", fontsize=14)
    
    # Add gridlines for better readability
    ax.yaxis.grid(True, linestyle='--', alpha=0.7)
    
    # Improve the layout and save the figure
    plt.tight_layout()
    plt.savefig(f"{category}_boxplot_no_names.png", dpi=300)  # Save the plot as a high-resolution image
    plt.show()
