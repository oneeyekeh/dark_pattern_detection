import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np  # Ensure numpy is imported

# Read the CSV file generated by the previous script
csv_file = '/Users/mohammad.yekeh/Desktop/Dev/Thesis-Dev/Aggrigator/third_experiment/aggregated_dpd_results.csv'
data = pd.read_csv(csv_file)

# Define the categories to be plotted
categories = ["Asymmetric", "Covert", "Deceptive", "Hides Information", "Restrictive"]

# Initialize dictionaries to store results
fluctuation_results = {}
average_results = {}
top_5_websites = {}

# Prepare and analyze the data for each category
for category in categories:
    # Extract columns related to the current category
    category_columns = [col for col in data.columns if category in col]
    
    # Create a DataFrame for the current category
    category_data = data[["website"] + category_columns]
    
    # Melt the DataFrame to long format
    category_melted = category_data.melt(id_vars=["website"], var_name="run", value_name="score")
    
    # Convert non-numeric entries (like "failed") to NaN
    category_melted["score"] = pd.to_numeric(category_melted["score"], errors='coerce')
    
    # Drop rows with NaN values (non-numeric values or missing data)
    category_melted.dropna(subset=["score"], inplace=True)
    
    # Calculate the fluctuation (standard deviation) over the first 6 runs for each website
    category_melted["run_number"] = category_melted["run"].str.extract(r'(\d+)').astype(int)  # Extract run number
    first_9_runs = category_melted[category_melted["run_number"] <= 9]  # Filter first 6 runs
    
    fluctuation = first_9_runs.groupby("website")["score"].std()
    fluctuation_results[category] = fluctuation.mean()  # Store average fluctuation for the category
    
    # Calculate the average score over all 9 runs for each website
    average_score = category_melted.groupby("website")["score"].mean()
    average_results[category] = average_score.mean()  # Store average score for the category
    
    # Get top 5 websites with the highest average scores
    sorted_websites = average_score.sort_values(ascending=False).head(5).index.tolist()
    top_5_websites[category] = sorted_websites
    
    # Sort the DataFrame by website based on the sorted list
    category_melted["website"] = pd.Categorical(category_melted["website"], categories=sorted_websites, ordered=True)
    
    # Plot the boxplot
    plt.figure(figsize=(18, 12))  # Adjust figure size for better resolution and space
    sns.set(style="whitegrid")  # Set the background style for better readability
    ax = sns.boxplot(x='website', y='score', data=category_melted, palette="coolwarm", fliersize=6)
    
    # Customize the plot
    plt.title(f"Boxplot of Scores for {category} Across Different Runs", fontsize=16, fontweight='bold')
    plt.xticks(rotation=90)  # Rotate x-axis labels for better readability
    plt.xlabel("Websites Sorted from Dark to Light", fontsize=14)  # Add x-axis label
    plt.ylabel(f"{category} Scores", fontsize=14)
    
    # Add gridlines for better readability
    ax.yaxis.grid(True, linestyle='--', alpha=0.7)
    
    # Improve the layout and save the figure
    plt.tight_layout()
    plt.savefig(f"{category}_boxplot_no_names.png", dpi=300)  # Save the plot as a high-resolution image
    plt.show()

# Output the results
print("\nAverage fluctuation over 9 runs for each category:")
for category, fluctuation in fluctuation_results.items():
    print(f"{category}: {fluctuation:.2f}")

print("\nAverage score over 9 runs for each category:")
for category, avg_score in average_results.items():
    print(f"{category}: {avg_score:.2f}")

print("\nTop 5 websites for each category:")
for category, websites in top_5_websites.items():
    print(f"{category}: {', '.join(websites)}")
